version: 2
jobs:
  build:
    docker:
      - image: google/cloud-sdk:206.0.0
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.05.0-ce
      - run:
          name: CircleCIでGCPにログインする
          command: |
            GOOGLE_PROJECT_ID=door-app-prod
            GCLOUD_SERVICE_KEY=${GCLOUD_SERVICE_KEY}
            echo ${GCLOUD_SERVICE_KEY} | base64 -i --decode > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project door-app-prod
            gcloud --quiet config set compute/zone asia-northeast1-a
      - run:
          name: dockerイメージをビルドする
          command: |
            docker build -t gcr.io/$(gcloud config get-value project)/home:$CIRCLE_SHA1 -f Dockerfile .
      - run:
          name: ビルドしたdockerイメージを GoogleContainerRegistory にpushする
          command: |
            gcloud docker -- push gcr.io/$(gcloud config get-value project)/home:$CIRCLE_SHA1
  deploy:
    docker:
      - image: google/cloud-sdk:206.0.0
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.05.0-ce
      - run:
          name: CircleCIでGCPにログインする
          command: |
            GOOGLE_PROJECT_ID=door-app-prod
            GCLOUD_SERVICE_KEY=${GCLOUD_SERVICE_KEY}
            echo ${GCLOUD_SERVICE_KEY} | base64 -i --decode > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project door-app-prod
            gcloud --quiet config set compute/zone asia-northeast1-a
            gcloud --quiet container clusters get-credentials door
      - run:
          name: templateからyaml作る
          command: |
            cat ./kubernetes/production/home.yaml.template | sed -e "s/<IMAGE_TAG>/$CIRCLE_SHA1/g" \
              > ./kubernetes/production/home.yaml
      - store_artifacts:
          path: kubernetes/production
      - deploy:
          name: Kubernetesのコンポーネントをデプロイ
          command: |
            kubectl apply -f kubernetes/production/home.yaml

workflows:
  version: 2
  test:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
